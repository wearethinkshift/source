// Grid.scss
// =============================================================================
// Tools to build your grid system.
// =============================================================================

// -----------------------------------------------------------------------------
// Grid Config
// -----------------------------------------------------------------------------
$grid-container-width: 960px!default; // the width of the grid container.
$grid-columns:            12!default; // number of columns in the grid.
//$grid-padding:             0!default; // padding within a column.
//$grid-border-width:        0!default; // width of the border, for maths.
//$grid-border:           none!default; // border-style for grid columns.
$grid-spacing:          20px!default; // spacing in between grid columns.
$form-field-padding:       0!default; // no form-grid compatability unless specified in forms.scss

// -----------------------------------------------------------------------------
// Grid Mixins
// -----------------------------------------------------------------------------

// Build Grid:
// -----------
// Creates all of the classes to build your grid system.
// $grid-container-width: number in pixels for the container.
// $grid-columns: number of columns to make divisions from.
// $namespace: optional namespace to greate new grid systems.
@mixin grid-init($grid-container-width, $grid-columns, $namespace:"") {

	// Column Width.
	// Subtract the width of the margin multiplied by the number of grid columns
	// less two (first and last have no margins), then divide the remaining value
	// and round it down.
  $column-width: floor(($grid-container-width - ($grid-spacing * ($grid-columns - 1)) )/$grid-columns);

	.#{$namespace}grid {

		// add the grid container to the clearfix styles.
		@extend .clearfix;

		// build the classes.
		.#{$namespace}col {
      
      @include breakpoint(tablet) {
        
        $margin: percentage(floor($grid-spacing/2)/$grid-container-width);
        float: left;
        
        @if $column-width > 0 {
          width: percentage(round($column-width/$grid-container-width));
        }
        
  			@if $margin != 0 {
  				margin: 0 $margin;
  			}
        
//        @if $grid-padding != 0 {
//          padding: $grid-padding;
//        }
        &:first-child,
        &.#{$namespace}first {
        	margin-left: 0!important;
        }

        &:last-child,
        &.#{$namespace}last {
        	margin-right: 0!important;
        }
        
        @if $form-field-padding > 0 {
          &.field {
            padding: 0 $form-field-padding;
          }
        }
        
        @for $n from 2 to $grid-columns + 1 {
        
          $span-width: percentage(floor(($column-width * $n) + ($grid-spacing * ($n - 1)))/$grid-container-width);
        
          &.#{$namespace}colspan#{$n} {
            // width is the column width + spacing.
            // |column|mm|column|
            width: $span-width;
          
            // form field compatability.
            @if $form-field-padding > 0 {
              &.field {
                // width = (column width - $form-field-padding) + spacing.
                width: $span-width - ($form-field-padding * 2);
              }
            }
          } 
        }
        
      }
      
      @include breakpoint(monitor) {
        
      	$margin: (floor($grid-spacing/2)); // left and right margin.
        float: left;
        
        @if $column-width > 0 {
          width: $column-width;
        }
        
  			@if $margin != 0 {
  				margin: 0 $margin;
  			}
				
//        @if $grid-padding != 0 {
//          padding: $grid-padding;
//        }

        &:first-child,
  			&.#{$namespace}first {
  				margin-left: 0!important;
  			}

        &:last-child,
  			&.#{$namespace}last {
  				margin-right: 0!important;
  			}
        
        @if $form-field-padding > 0 {
          &.field {
            padding: 0 $form-field-padding;
          }
        }
      
        @for $n from 2 to $grid-columns + 1 {
        
          $span-width: floor(($column-width * $n) + ($grid-spacing * ($n - 1)));
        
          &.#{$namespace}colspan#{$n} {
            // width is the column width + spacing.
            // |column|mm|column|
            width: $span-width;
          
            // form field compatability.
            @if $form-field-padding > 0 {
              &.field {
                // width = (column width - $form-field-padding) + spacing.
                width: $span-width - ($form-field-padding * 2);
              }
            }
          } 
        }
      } // breakpoint
		}
	}
}

// -----------------------------------------------------------------------------
// Grid Styles
// -----------------------------------------------------------------------------
@include grid-init($grid-container-width, $grid-columns); // grid12