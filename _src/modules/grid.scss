// Grid.scss
// =============================================================================
// Tools to build your grid system.
// =============================================================================

// -----------------------------------------------------------------------------
// Grid Config
// -----------------------------------------------------------------------------
$grid-container-width: 960px!default; // the width of the grid container.
$grid-columns:             6!default; // number of columns in the grid.
$grid-padding:             0!default; // padding within a column.
$grid-border:           none!default; // border-style for grid columns.
$grid-spacing:          20px!default; // spacing in between grid columns.

// -----------------------------------------------------------------------------
// Grid Mixins
// -----------------------------------------------------------------------------

// Build Grid:
// -----------
// Creates all of the classes to build your grid system.
// $grid-container-width: number in pixels for the container.
// $grid-columns: number of columns to make divisions from.
// $namespace: optional namespace to greate new grid systems.
@mixin grid-init($grid-container-width, $grid-columns, $namespace:"") {

	// Margins
	$margin: (floor($grid-spacing/2));

	// Column Width.
	// Subtract the width of the margin multiplied by the number of grid columns
	// less two (first and last have no margins), then divide the remaining value
	// and round it down.

	// Example: (960 - (20 * (6-1 = 5) = 100) = 900) / 6 = 920/6 = 150
	$column-width: floor(($grid-container-width - ($grid-spacing * ($grid-columns - 1)) )/$grid-columns);

	.#{$namespace}grid {

		// add the grid container to the clearfix styles.
		@extend .clearfix;

		// build the classes.
		&.#{$namespace}grid#{$grid-columns} {

			.#{$namespace}grid-column {
				float: left;
				
				@if $column-width > 0 {
					width: $column-width;
				}
				
				@if $margin != 0 {
					margin: 0 $margin;
				}
				
				@if $grid-padding != 0 {
					padding: $grid-padding;
				}

				@if $grid-border != none {
					border: $grid-border;
				}

        &:first-child,
				&.#{$namespace}grid-column-first {
					margin-left: 0!important;
				}

        &:last-child,
				&.#{$namespace}grid-column-last {
					margin-right: 0!important;
				}

			}

			// we don't include span 1 because default column is the proper size.
			@for $n from 2 to $grid-columns + 1 {
				.#{$namespace}span#{$n} {
					// width is the column width + spacing.
					// |column|mm|column|
					width: floor(($column-width * $n) + ($grid-spacing * ($n - 1)));
				}
			}

		}

	}

}

// -----------------------------------------------------------------------------
// Grid Styles
// -----------------------------------------------------------------------------
@include grid-init($grid-container-width, $grid-columns); // grid6
@include grid-init(960, 8); // grid8