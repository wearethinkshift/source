// =============================================================================
// Mixins.scss
// -----------
// Mostly some CSS3 stuff, and some common cross-browser compatability
// hacks and other gotchas.
// =============================================================================

// --------------------------------------------------------------------------
// Vendor Prefix
// -------------
// Allows the creation of any vendor prefix property, as long as they're
// all the same property for the different vendor prefixes.
// for multiple properties, use a string:
// @include -v(box-shadow, "0px 1px 0px black, inset 0px 1px 0px white");
// --------------------------------------------------------------------------
@mixin -v($property, $values, $webkit:true, $moz:true, $ms:true, $o:true) {
  
  @if $webkit == true { -webkit-#{$property}: #{$values}; }
	@if $moz == true { -moz-#{$property}: #{$values}; }
  @if $ms == true { -ms-#{$property}: #{$values}; }
  @if $o == true { -o-#{$property}: #{$values}; }

  #{$property}: #{$values};
          
}


// --------------------------------------------------------------------------
// Worth Noting:
// -------------
// -ms and -o both implemented box-shadow, text-shadow and border-radius
// without vendor prefixes. Old versions of Mozilla and Webkit used the
// prefix, and their numbers are close to being 0, so to save some space
// in the css, these mixins disable support for vendor prefixes by default.
// This can be overridden in each mixin: @include box-shadow(..., true, true)
// will enable vendor prefixes for box shadow for webkit and mozilla.
// 
// The order of params will always be: webkit, moz, ms, o (longest to shortest)
// --------------------------------------------------------------------------

// --------------------------------------------------------------------------
// Box Shadow
// --------------------------------------------------------------------------
@mixin box-shadow($values, $webkit:false, $moz:false) {
	@include -v(box-shadow, $values, $webkit, $moz, false, false);
}

// --------------------------------------------------------------------------
// Text Shadow
// --------------------------------------------------------------------------
@mixin text-shadow($values, $webkit:false, $moz:false) {
	@include -v(text-shadow, $values, $webkit, $moz, false, false);
}

// --------------------------------------------------------------------------
// Transition
// --------------------------------------------------------------------------
@mixin transition($values, $webkit:true, $moz:true) {
	@include -v(transition, $values, $webkit, $moz, false, false);
}

// --------------------------------------------------------------------------
// Transform
// --------------------------------------------------------------------------
@mixin transform($values, $webkit:true, $moz:true, $ms:true) {
	@include -v(transform, $values, $webkit, $moz, $ms, false);
}

// --------------------------------------------------------------------------
// Border Radius
// --------------------------------------------------------------------------
@mixin border-radius($values, $webkit:false, $moz:false) {
	@include -v(border-radius, $values, $webkit, $moz, false, false);
}

@mixin border-top-left-radius($value, $webkit:false, $moz:false) {
  @include -v(border-top-left-radius, $value, $webkit, $moz, false, false);
}

@mixin border-top-right-radius($value, $webkit:false, $moz:false) {
  @include -v(border-top-right-radius, $value, $webkit, $moz, false, false);
}

@mixin border-bottom-left-radius($value, $webkit:false, $moz:false) {
  @include -v(border-bottom-left-radius, $value, $webkit, $moz, false, false);
}

@mixin border-bottom-right-radius($value, $webkit:false, $moz:false) {
  @include -v(border-bottom-right-radius, $value, $webkit, $moz, false, false);
}

// --------------------------------------------------------------------------
// Border Radius Utility
// --------------------------------------------------------------------------
// lets you generate individual radius calls
// by optionally placing in values in the following
// order: top left, top right, bottom right, bottom left
// no values = no output.
@mixin border-radius-utility($topLeft:false, $topRight:false, $bottomRight:false, $bottomLeft:false, $webkit:false, $moz:false) {
  
  @if $topLeft != false { @include border-top-left-radius($topLeft, $webkit, $moz); }
  @if $topRight != false { @include border-top-right-radius($topRight, $webkit, $moz); }
  @if $bottomLeft != false { @include border-bottom-left-radius($bottomLeft, $webkit, $moz); }
  @if $bottomRight != false { @include border-bottom-right-radius($bottomRight, $webkit, $moz); }

}


// --------------------------------------------------------------------------
// Linear Gradient
// --------------------------------------------------------------------------
// doesn't set a fallback
// doesn't include old webkit gradient
// doesn't include old MS Support
@mixin background-linear-gradient($values) {

	background-image: -webkit-linear-gradient(#{$values});
	background-image:    -moz-linear-gradient(#{$values});
	background-image:     -ms-linear-gradient(#{$values});
	background-image:      -o-linear-gradient(#{$values});
	background-image:         linear-gradient(#{$values});

}

// Pulling some mixins from Twitter Bootstrap (and converting to sass):
// https://github.com/twitter/bootstrap/blob/master/less/mixins.less

// --------------------------------------------------------------------------
// Opacity
// --------------------------------------------------------------------------
@mixin opacity($opacity) {
  opacity: $opacity / 100;
  @if $supports-ie8 or $supports-ie7 {
    filter: alpha(opacity=$opacity); // ie8 and below?
  }
}


// --------------------------------------------------------------------------
// Inline Block (with IE7 compatability)
// --------------------------------------------------------------------------
@mixin display-inline-block($whitespace:false) {
  display: inline-block;
	@if $supports-ie7 == true {
		*display: inline; /* IE7 inline */
		*zoom: 1; /* IE7 inline-block */
    @if $whitespace == "left" {
      *margin-left: 0.3em;
    }
    @if $whitespace == "right" {
      *margin-right: 0.3em;
    }
	}
}


// --------------------------------------------------------------------------
// Breakpoints
// --------------------------------------------------------------------------
@mixin breakpoint($size) {
  @if $size == monitor {
    @media only screen
     and (min-width: 1024px) { @content }
  }
  
  @else if $size == tablet {
    @media only screen
     and (min-width: 600px)
     and (max-width: 1024px) { @content }
  }
  
  @else if $size == handheld {
    @media only screen
     and (min-width: 320px)
     and (max-width: 600px) { @content }
  }
  
  // Assume that $size is an expression...
  @else if (type-of($size) == string) {
    @media #{$size} { @content }
  }
  
}